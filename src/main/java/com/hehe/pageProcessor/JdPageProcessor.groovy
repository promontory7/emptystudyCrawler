package com.hehe.pageProcessorimport com.hehe.model.Bookimport com.hehe.pageProcessor.base.BasePageProcessorimport com.hehe.service.IBookServiceimport org.jsoup.nodes.Elementimport org.jsoup.select.Elementsimport org.slf4j.Loggerimport org.slf4j.LoggerFactoryimport org.springframework.beans.factory.annotation.Autowiredimport org.springframework.context.annotation.ComponentScanimport org.springframework.stereotype.Controllerimport us.codecraft.webmagic.Page/** * Created by hehe on 2017/6/23. * 京东网 */class JdPageProcessor extends BasePageProcessor {    private final Logger LOG = LoggerFactory.getLogger(this.getClass());    static IBookService bookService    @Override    List<String> setBaseUrlAndSum() {        List<String> lists = new ArrayList<>()        Elements ul = document.getElementsByClass('menu-drop-list')        if (ul) {            ul.select('a').each {                lists.add('https://list.jd.com' + it.attr('href').toString().trim() + '&page=1&delivery=1&stock=0&sort=sort_totalsales15_desc&trans=1')            }        } else {            LOG.error('找不到各分类列表地址')        }        LOG.info('各分类列表地址' + lists.toArray().toString())        return lists    }    @Override    def setTypeOfUrl() {        ["https://list\\.jd\\.com/list\\.html\\?cat\\=1713*",         "https://item\\.jd\\.com/\\d+\\.html*"]    }    @Override    def listPrecess(Page page) {        LOG.warn('列表处理')        List<String> lists = page.getHtml().xpath('//ul[@class=\'gl-warp clearfix\']').links().regex("//item\\.jd\\.com/\\d+\\.html*").all()        lists = new ArrayList<>(new HashSet<String>(lists))//去重        LOG.warn('本列表页面获得' + lists.size() + '个商品详情连接:  ' + lists.toArray().toString())        page.addTargetRequests(lists)        //下一页        Elements nexts = document.getElementsByClass('pn-next')        if (nexts) {            String nextUrl = 'https://list.jd.com' + nexts.get(0).attr('href')            page.addTargetRequest(nextUrl)            LOG.warn('增加下一页链接：' + nextUrl)        } else {            LOG.warn('已经是最后一页')        }    }    @Override    def detailProcess(Page page) {        LOG.warn('详情处理')        //图片链接        String imageUrl = 'https:' + document.getElementById('spec-n1').select('img').get(0).attr('src').toString().trim()        //书名        String bookname = document.getElementById('name').select('h1').get(0).text()        //促销语        String promontion = document.getElementById('p-ad').text()        //价格        String price = document.getElementById('jd-price').text()        //作者        String author = document.getElementById('p-author').text()        //出版社        String publisher = ''        //ISBN        String isbn = ''        Element parameter2 = document.getElementById('parameter2')        if (parameter2) {            Elements elements = parameter2.children()            if (elements) {                publisher = elements.get(0).attr('title')                isbn = elements.get(1).attr('title')            }        }        //内容介绍        String brief = ''        //作者介绍        String authorBrief = ''        //目录        String catalog = ''        //精彩书摘        String digest = ''        Elements details = document.getElementById('J-detail-content').children()        details.each {            String type = it.attr('text').trim()            if (type) {                String content = it.getElementsByClass('book-detail-content').get(0).html()                switch (type) {                    case '内容简介':                        brief = content                        break                    case '作者简介':                        authorBrief = content                        break                    case '目录':                        catalog = content                        break                    case '精彩书摘':                        digest = content                        break                    default:                        break                }            }        }        Book book = new Book(image: imageUrl, name: bookname, promontion: promontion, price: price, author: author,                isbn: isbn, publisher: publisher, brief: brief, authorBrief: authorBrief, catalog: catalog, digest: digest)        boolean successful = bookService.insertBook(book)        if (successful) {            LOG.info('保存商品信息成功:   ' + book.toString())        } else {            LOG.error('保存商品信息失败:   ' + book.toString())        }        return null    }    @Override    def parseContent(String content) {        return null    }}